// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;

import java.util.*;

public class CheckoutTest extends  Hooks {
  private CheckoutPage checkoutPage;

  @Before
  public void setupPageObject() {
    checkoutPage = new CheckoutPage(driver);
    driver.manage().window().maximize();
  }


  @Test
  public void checkout() throws InterruptedException {
    checkoutPage.getFoodMenu();
    checkoutPage.getAddToCart();
    checkoutPage.completeAndSubmitCart();
    Thread.sleep(5000);
    assertEquals("CHECKOUT", checkoutPage.pageTitle.getText());
    checkoutPage.completeAllMandatoryFieldsInCheckoutPage();
    checkoutPage.clickAllContinueButtonsOnCheckoutPage();
    checkoutPage.assertTextWhenReady(checkoutPage.pageTitle,"YOUR ORDER HAS BEEN RECEIVED.");

  }

  @Test
    public void checkoutMandatoryFirstNameTest() {
    checkoutPage.fillMandatoryFieldsExcept(checkoutPage.billingFirstname);
    assertEquals("This is a required field.", checkoutPage.mandatoryFirstName.getText());
  }

  @Test
  public void checkoutMandatoryLastNameTest() {
    checkoutPage.fillMandatoryFieldsExcept(checkoutPage.billingLastname);
    assertEquals("This is a required field.", checkoutPage.mandatoryLastName.getText());
  }

  @Test
  public void checkoutMandatoryAddressTest() {
    checkoutPage.fillMandatoryFieldsExcept(checkoutPage.street);
    assertEquals("This is a required field.", checkoutPage.mandatoryStreet.getText());
  }

  @Test
  public void checkoutMandatoryCityTest()  {
    checkoutPage.fillMandatoryFieldsExcept(checkoutPage.billingCity);
    assertEquals("This is a required field.", checkoutPage.mandatoryCity.getText());
  }

  @Test
  public void checkoutMandatoryRegionTest() {
    checkoutPage.fillMandatoryFieldsExcept(checkoutPage.billingRegionDropdown);
    assertEquals("Please select an option.", checkoutPage.mandatoryRegion.getText());
  }

  @Test
  public void checkoutMandatoryPostCodeTest()  {
    checkoutPage.fillMandatoryFieldsExcept(checkoutPage.billingPostcode);
    assertEquals("This is a required field.", checkoutPage.mandatoryPostcode.getText());
  }

  @Test
  public void checkoutMandatoryPhoneNumberTest()  {
    checkoutPage.fillMandatoryFieldsExcept(checkoutPage.telephone);
    assertEquals("This is a required field.", checkoutPage.mandatoryPhoneNumber.getText());
  }
}







